package main

import (
	"fmt"
	"log"
	"os/exec"
	"bytes"
	"encoding/json"
	"strings"
)

type IftopEvent struct {
	Interface string 	`json:"interface"`
	Interval string		`json:"interval"`
	Src string 			`json:"source"`
	Dest string 		`json:"destination"`
	Traffic string		`json:"traffic"`
}

type Pair struct {
	Src 	string 	`json:"source"`
	Dest 	string	`json:"destination"`
}

func main() {
    iftop, err := exec.LookPath("iftop")
	if err != nil {
		log.Fatal(err)
	}
    log.Printf("iftop is available at %s\n", iftop)
	interval := 10
	listenOn := "en0"
	numLines := 10
	args := []string{"-t", "-s", strconv.Itoa(interval), "-L", strconv.Itoa(numLines), "-i", listenOn, "-n"}
    cmd := exec.Command(iftop, args...)

	var out bytes.Buffer
	var stderr bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &stderr

	err = cmd.Run()
	if err != nil {
		fmt.Println(fmt.Sprint(err) + ": " + stderr.String())
		log.Fatal(err)
	}
	lines := strings.Split(out.String(), "\n")
	var ret []Pair
	for _, l := range lines {
		log.Print(l)
		if len(l) != 0 && strings.Contains(l, "=>") {
			ret = append(ret, Pair{})
			ret[len(ret)-1].Src = l
		} else if len(l) != 0 && strings.Contains(l, "<=") {
			ret[len(ret)-1].Dest = l
		}
	}
	log.Print(ret)

	events := []IftopEvent{}
	
	for _, value := range ret {
		event := IftopEvent{Interval: strconv.Itoa(interval), Interface: listenOn}
		// TODO(yuemin): use more verbose FieldsFunc
		log.Print(value)
		uploadRecord := strings.Fields(value.Src)
		event.Src = uploadRecord[1]
		event.Upload = uploadRecord[4]
		downRecord := strings.Fields(value.Dest)
		event.Dest = downRecord[0]
		event.Download = downRecord[3]

		output, _ := json.Marshal(event)
		log.Print(string(output))
		events = append(events, event)
	}
	
	event := IftopEvent{Interval: "10s"}
	output, _ := json.Marshal(event)
	log.Print(string(output))
}
